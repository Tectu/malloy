name: CI (linux, windows)

on:
  push:
  pull_request:
    branches: [main]

env:
  BUILD_TYPE: Release
  INSTALL_LOCATION: .local

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        boost_version: [1.86.0, 1.87.0, 1.88.0]
        shared: [ON, OFF]
        toolchain:
          [
            {
              name: "Ubuntu GCC TLS",
              cxx: "g++",
              cc: "gcc",
              packages: "libspdlog-dev libssl-dev",
              tls: ON,
              os: ubuntu-latest,
            },
            {
              name: "Ubuntu GCC",
              cxx: "g++",
              cc: "gcc",
              packages: "libspdlog-dev",
              tls: OFF,
              os: ubuntu-latest,
            },
            {
              name: "Ubuntu Clang TLS",
              cxx: "clang++",
              cc: "clang",
              packages: "libspdlog-dev libssl-dev",
              tls: ON,
              os: ubuntu-latest,
            },
            {
              name: "Ubuntu Clang",
              cxx: "clang++",
              cc: "clang",
              packages: "libspdlog-dev",
              tls: OFF,
              os: ubuntu-latest,
            },
            # ToDo
            #{
            #  name: "VS2022",
            #  cxx: "cl.exe",
            #  cc: "cl.exe",
            #  tls: OFF,
            #  packages: "libspdlog-dev openssl", # We have to install something
            #  os: windows-latest,
            #},
          ]

    continue-on-error: false
    runs-on: ${{ matrix.toolchain.os }}
    env:
      Boost_ROOT: ${{github.workspace}}/3rdparty/boost-${{ matrix.boost_version }}
      CC: ${{ matrix.toolchain.cc }}
      CXX: ${{ matrix.toolchain.cxx }}

    name: "${{ matrix.toolchain.name }} (boost v${{ matrix.boost_version }}) (shared: ${{ matrix.shared }})"
    steps:
      - uses: actions/checkout@v4

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Setup boost env
        run: |
          BOOST_URL="https://archives.boost.io/release/${{ matrix.boost_version }}/source/boost_$(echo ${{ matrix.boost_version }} | sed 's/\./_/g').tar.bz2"
          echo "BOOST_URL=$BOOST_URL" >> $GITHUB_ENV
        shell: bash

      - name: Install packages (via choco)
        if: runner.os == 'Windows'
        run: choco upgrade ${{ matrix.toolchain.packages }}

      - name: Install packages (via apt)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install ${{ matrix.toolchain.packages }} -y

      - name: Install packages (via homebrew)
        if: runner.os == 'macOS'
        run: brew install ${{ matrix.toolchain.packages }}

      - name: Install Boost
        run: |
          if [ "$OS" == "Windows_NT" ]; then
            # fix up paths to be forward slashes consistently
            Boost_ROOT=$(echo $Boost_ROOT | sed 's/\\/\//g')
          fi
          echo "BOOST URL: ${BOOST_URL}"
          echo "BOOST ROOT: ${Boost_ROOT}"
          mkdir -p $Boost_ROOT
          cd $Boost_ROOT
          curl --progress-bar --location --output download.tar.bz2 $BOOST_URL
          tar -xf download.tar.bz2
          cp -r boost_*/* .
          rm -rf boost_*/* download.tar.bz2 download.tar
          ./bootstrap.sh --with-toolset=${{ matrix.toolchain.cc }} --prefix=${Boost_ROOT}
          ./b2 --toolset=${{ matrix.toolchain.cc }} --with-url install
        shell: bash

      - name: Install msvc
        if: ${{ matrix.toolchain.cxx == 'cl.exe' }} # This is a bit of a hack
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure
        run: cmake -Bbuild -GNinja -DMALLOY_BUILD_EXAMPLES=ON -DMALLOY_BUILD_TESTS=ON -DMALLOY_FEATURE_TLS=${{ matrix.toolchain.tls }} -DMALLOY_BUILD_SHARED=${{ matrix.shared }}

      - name: Build
        run: cmake --build build

      - name: Run tests
        run: ./build/bin/malloy-tests
